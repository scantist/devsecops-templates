# SCA Scan - GitLab CI Template
# =====================================
#
# Simple, modular SCA (Software Composition Analysis) scanning template
# Uses sca-bom-detect.jar to scan dependencies for vulnerabilities
#
# USAGE:
# ------
# 1. Include in your .gitlab-ci.yml:
#    include:
#      - local: 'path/to/bom-sca-scan.yml'
#
# 2. Use the job:
#    - bom-sca-scan (runs SCA scan using sca-bom-detect.jar)
#
# 3. Optional: Add project-specific setup in before_script

# Define stages
stages:
  - test

image: ubuntu:latest

variables:
  SCA_BOM_DETECT_JAR: "sca-bom-detect.jar"
  SCA_BOM_DETECT_DOWNLOAD_URL: "${SCA_BOM_DETECT_DOWNLOAD_URL}"
  DEVSECOPS_TOKEN: "${DEVSECOPS_TOKEN}"
  DEVSECOPS_IMPORT_URL: "${DEVSECOPS_IMPORT_URL}"
  ASYNC: "${ASYNC:-false}" # defaults to false if not set

# =============================================================================
# SCA Build Job - Scans dependencies using sca-bom-detect.jar
# =============================================================================
bom-sca-scan:
  stage: test
  
  variables:
    SCA_JAR_NAME: "sca-bom-detect.jar"
    SCA_PLUGIN_DIR: ".scantist"
    SCA_REPORT_DIR: "devsecops_report"

  before_script:
    - echo "📦 Installing required dependencies..."
    - apt-get update
    - apt-get install -y curl openjdk-11-jre-headless
    - echo "✅ Dependencies installed successfully"

  script: |
    echo "🔍 Starting Scantist SCA scan..."
    # Validate DevSecOps token is provided
    if [[ -z "${DEVSECOPS_TOKEN:-}" ]]; then
      echo "[SCA ERROR] DEVSECOPS_TOKEN environment variable is required" >&2
      exit 1
    fi
    # Download SCA detector if not exists
    if [[ ! -f "${SCA_PLUGIN_DIR}/${SCA_JAR_NAME}" ]]; then
      echo "[SCA] Downloading SCA detector..."
      mkdir -p "${SCA_PLUGIN_DIR}"
      curl -L -o "${SCA_PLUGIN_DIR}/${SCA_JAR_NAME}" "${SCA_BOM_DETECT_DOWNLOAD_URL}"
      echo "[SCA] Download completed"
    fi
    # Create report directory
    mkdir -p "${SCA_REPORT_DIR}"
    # Run SCA scan with DevSecOps integration
    echo "[SCA] Starting scan on: ${CI_PROJECT_DIR}"
    echo "[SCA] DevSecOps integration enabled"
    env DEVSECOPS_TOKEN="${DEVSECOPS_TOKEN}" \
        ${DEVSECOPS_IMPORT_URL:+DEVSECOPS_IMPORT_URL="${DEVSECOPS_IMPORT_URL}"} \
        java -jar "${SCA_PLUGIN_DIR}/${SCA_JAR_NAME}" -f "${CI_PROJECT_DIR}" --debug -report json
    echo "[SCA] Scan completed. Reports in: ${SCA_REPORT_DIR}"
  artifacts:
    when: always
    expire_in: 7 days
    paths:
      - "${SCA_REPORT_DIR}/"  # SCA reports from DevSecOps integration
    reports:
      # GitLab Security Dashboard integration (if supported)
      dependency_scanning: "${SCA_REPORT_DIR}/*.json"
