# SCA Scan - CircleCI Configuration Template
# ==========================================
#
# Simple, modular SCA (Software Composition Analysis) scanning configuration
# Uses sca-bom-detect.jar to scan dependencies for vulnerabilities
#
# USAGE:
# ------
# 1. Copy this file to .circleci/config.yml in your repository
# 2. Configure the required environment variables in CircleCI project settings:
#    - SCA_BOM_DETECT_DOWNLOAD_URL
#    - DEVSECOPS_TOKEN
#    - DEVSECOPS_IMPORT_URL (optional)
#    - ASYNC (optional, defaults to false)
# 3. Push to trigger the SCA scan workflow

version: 2.1

# Define reusable executors
executors:
  ubuntu-executor:
    docker:
      - image: ubuntu:latest
    working_directory: ~/project

# Define reusable commands
commands:
  setup-dependencies:
    description: "Install required dependencies for SCA scanning"
    steps:
      - run:
          name: "üì¶ Installing required dependencies"
          command: |
            echo "üì¶ Installing required dependencies..."
            apt-get update
            apt-get install -y curl openjdk-11-jre-headless
            echo "‚úÖ Dependencies installed successfully"

  validate-environment:
    description: "Validate required environment variables"
    steps:
      - run:
          name: "üîç Validating environment variables"
          command: |
            if [[ -z "${DEVSECOPS_TOKEN:-}" ]]; then
              echo "[SCA ERROR] DEVSECOPS_TOKEN environment variable is required" >&2
              exit 1
            fi
            echo "‚úÖ Environment validation passed"

  download-sca-detector:
    description: "Download SCA detector JAR if not exists"
    steps:
      - run:
          name: "üì• Downloading SCA detector"
          command: |
            SCA_JAR_NAME="sca-bom-detect.jar"
            SCA_PLUGIN_DIR=".scantist"
            
            if [[ ! -f "${SCA_PLUGIN_DIR}/${SCA_JAR_NAME}" ]]; then
              echo "[SCA] Downloading SCA detector..."
              mkdir -p "${SCA_PLUGIN_DIR}"
              curl -L -o "${SCA_PLUGIN_DIR}/${SCA_JAR_NAME}" "${SCA_BOM_DETECT_DOWNLOAD_URL}"
              echo "[SCA] Download completed"
            else
              echo "[SCA] SCA detector already exists, skipping download"
            fi

  run-sca-scan:
    description: "Execute SCA scan with DevSecOps integration"
    steps:
      - run:
          name: "üîç Running SCA scan"
          command: |
            SCA_JAR_NAME="sca-bom-detect.jar"
            SCA_PLUGIN_DIR=".scantist"
            SCA_REPORT_DIR="devsecops_report"
            
            echo "üîç Starting Scantist SCA scan..."
            
            # Create report directory
            mkdir -p "${SCA_REPORT_DIR}"
            
            # Run SCA scan with DevSecOps integration
            echo "[SCA] Starting scan on: $(pwd)"
            echo "[SCA] DevSecOps integration enabled"
            
            env DEVSECOPS_TOKEN="${DEVSECOPS_TOKEN}" \
                ${DEVSECOPS_IMPORT_URL:+DEVSECOPS_IMPORT_URL="${DEVSECOPS_IMPORT_URL}"} \
                java -jar "${SCA_PLUGIN_DIR}/${SCA_JAR_NAME}" -f "$(pwd)" --debug -report json
            
            echo "[SCA] Scan completed. Reports in: ${SCA_REPORT_DIR}"

# Define jobs
jobs:
  sca-scan:
    executor: ubuntu-executor
    
    # Environment variables - equivalent to GitLab CI variables
    environment:
      SCA_BOM_DETECT_JAR: "sca-bom-detect.jar"
      SCA_JAR_NAME: "sca-bom-detect.jar"
      SCA_PLUGIN_DIR: ".scantist"
      SCA_REPORT_DIR: "devsecops_report"
      ASYNC: "false"  # defaults to false if not set
    
    steps:
      - checkout
      
      # Setup phase - equivalent to GitLab CI before_script
      - setup-dependencies
      - validate-environment
      
      # Main scanning phase - equivalent to GitLab CI script
      - download-sca-detector
      - run-sca-scan
      
      # Store artifacts - equivalent to GitLab CI artifacts
      - store_artifacts:
          path: devsecops_report
          destination: sca-reports
      
      # Store test results for CircleCI dashboard
      - store_test_results:
          path: devsecops_report

# Define workflows
workflows:
  version: 2
  
  # Main workflow for SCA scanning
  sca-security-scan:
    jobs:
      - sca-scan:
          # Add filters if needed
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/
                - /hotfix\/.*/
          
          # Context for environment variables (optional)
          # context:
          #   - scantist-security-context
